
// Insert the number of items in the collection next to the browse button
axios.get('http://localhost:8000/data/misc-group.json').then(function(miscJson) {
    document.getElementById("item-count").innerHTML = miscJson.data.record_count;
}).catch(function(error) {
    console.log(error);
});


// Plot the dates triple bar chart
axios.get('http://localhost:8000/data/temporal-group.json').then(function(datesJson) {
    Plotly.newPlot("dates-bar-chart",
       datesJson.data,
       { title: "Creation, Copyright and Postmark Dates",
         barmode: "stack",
         margin: { l: 25, b: 25, r: 25, t: 40 },
         width: 400,
         height: 250 });
}).catch(function(error) {
    console.log(error);
});

// Plot the materials pie chart
axios.get('http://localhost:8000/data/content-category.json').then(function(materialsJson) {
    Plotly.newPlot("materials-pie-chart",
       materialsJson.data,
       { title: "Types of Materials",
         margin: { l: 25, b: 25, r: 25, t: 40 },
         width: 400,
         height: 250 });
}).catch(function(error) {
    console.log(error);
});

// Plot postcard subject geographic coverage
axios.get('http://localhost:8000/data/hook-tgm.json').then(function(geographicJson) {
    hookTGM = geographicJson.data;

    var mapData = [{
        type: 'scattergeo',
        mode: 'markers',
        text: hookTGM.text,
        lon: hookTGM.lon,
        lat: hookTGM.lat,
        marker: {
            size: hookTGM.frequency.map(function(f) { return String(Number(f)+5); })
        }
    }];

    var mapLayout = {
        title: "Postcard Image Coverage",
        geo: {
            scope: 'usa',
            showland: true,
            landcolor: 'rgb(240, 240, 240)',
        },
        margin: { l: 20, b: 20, r: 20, t: 40 },
        width: 400,
        height: 250
    };

    Plotly.newPlot("coverage-map", mapData, mapLayout);
}).catch(function(error) {
    console.log(error);
});

// Plot the timeline generated from the EAD
// A trailing ',' in the EAD generated by my XSLT sheet caused axios to return the .data field as a string not an object (because it was not correct JSON?), and also caused TimelineJS to interepret the contents of the file itself as a filename (somehow). Previously this trailing ',' was fine because it is acceptable in JavaScript (but not in JSON).
timeline = new TL.Timeline('timeline-embed', 'http://localhost:8000/data/timeline.json', { timenav_height: 250 });
